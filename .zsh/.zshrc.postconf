### User config ###

# add home bin to the PATH
export PATH=$HOME/bin:$PATH

# add cargo to the PATH
export PATH=$PATH:$HOME/.cargo/bin

### User variables ###
# Source directory
export SRC_PATH=$HOME/source

# TTK variables
#export TTK_PATH=$SRC_PATH/ttk/ttk-guillaume/source

# ParaView variables
PV_PATH=$SRC_PATH/paraview
export PV_PLUGIN_PATH=$PV_PATH/plugins
export ParaView_DIR=$PV_PATH/build

# VTK variables
export VTK_DIR=$SRC_PATH/vtk/build

# Firefox central variable
export MOZCONFIG=$HOME/.mozconfig

### User aliases ###
alias emacs='emacs -nw'
alias paraview=$PV_PATH"/install/bin/paraview"
alias pvpython=$PV_PATH"/install/bin/pvpython"
alias docker_cleanc='docker rm $(docker ps -a -q)'
alias docker_cleani='docker rmi $(docker images -q -f dangling=true)'
alias docker_deli='docker rmi $(docker images -q)'

### Auto-updated sources ###
waitingTime='300'
export AUTO_UPDATE_FILE=/tmp/auto_update.log
export AUTO_UPDATE_LOCK=/tmp/auto_update.lock
if [ ! -f $AUTO_UPDATE_LOCK ] && [ -f $AUTO_UPDATE_FILE ]; then
  packages=$(cat $AUTO_UPDATE_FILE 2> /dev/null)
  numberOfUpdates=$(wc -l $AUTO_UPDATE_FILE 2> /dev/null | cut -f1 -d\ )
  if [ $numberOfUpdates -ge 1 ]; then
    local auto_update_answer=""
    echo $packages
    echo -n 'The packages above need to be updated, do you want to proceed? [y/n] : '
    read auto_update_answer
    if [[ $auto_update_answer == "y" ]]; then
      saved_dir=$(pwd)

      for package in $(cat $AUTO_UPDATE_FILE); do
        cd $package
        echo $package

        # AUR build
        if [ -f 'PKGBUILD' ]; then
          git pull origin master
          makepkg -si
        else
          git pull
          git submodule update --init

          # project with CMakeLists.txt
          name=${PWD##*/}
          if [[ $name == 'source' ]] && [[ -f 'CMakeLists.txt' ]]; then
            # move to build directory
            cd ../build

            # build with ninja
            if [ -f 'build.ninja' ]; then
              ninja install
            elif [ -f 'Makefile' ]; then
              ncores=$(grep -c 'processor' /proc/cpuinfo)
              make -j $ncores && make install
            fi
          fi
        fi
      done

      # return to original directory
      cd $saved_dir
    elif [[ $auto_update_answer == "n" ]]; then
      touch $AUTO_UPDATE_LOCK
      notify-send -u low 'System' "packages auto-install delayed for $waitingTime s."
      (sleep $waitingTime && rm -f $AUTO_UPDATE_LOCK 2> /dev/null)&
    fi
  fi

  echo -n '' > $AUTO_UPDATE_FILE
fi

### GNU Screen ###
# store the screen sessions in here
export SCREEN_SESSIONS_PATH=$HOME/.screen/sessions
# detect if gnu screen is used
if [[ $TERM =~ 'screen' ]]; then
  local screen_parsed_file=${STY#[0-9]*.}
  local screen_session_file=$SCREEN_SESSIONS_PATH/$screen_parsed_file
  if [ -f $screen_session_file ]; then
    if [ ! -f /tmp/$STY ]; then
      local screen_load_answer=""
      echo -n '['$screen_parsed_file'] session file detected, do you want to load it? [y/n] : '
      read screen_load_answer
      if [[ $screen_load_answer == "y" ]]; then
        clear
        screen -X source $screen_session_file
        touch /tmp/$STY
      fi
    fi
  fi
fi
